using System.Text.Json.Serialization;
using DataHub.Core.Models;

namespace DataHub.Server.Models;

/// <summary>
/// Represents the response from the Open Library API. <br/>
/// Generated by using official open-api documentation: <see href="https://openlibrary.org/swagger/docs#/subjects"/> &amp; <see href="https://openlibrary.org/dev/docs/api/subjects"/>.
/// </summary>
public partial class OpenLibraryApiResponse
{
    /// <summary>
    /// The key of the subject.
    /// </summary>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// The name of the subject.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }

    /// <summary>
    /// The type of the subject.
    /// </summary>
    [JsonPropertyName("subject_type")]
    public string SubjectType { get; set; }

    /// <summary>
    /// The total count of works related to the subject.
    /// </summary>
    [JsonPropertyName("work_count")]
    public long WorkCount { get; set; }

    /// <summary>
    /// The list of works related to the subject.
    /// </summary>
    [JsonPropertyName("works")]
    public List<Work> Works { get; set; }

    /// <summary>
    /// Converts the OpenLibraryApiResponse to Book data for the Open Library API client.
    /// </summary>
    /// <param name="apiProvider">The name of the API provider client.</param>
    /// <returns>An <see cref="ApiClientData{Book}"/>instance containing book data.</returns>
    public ApiClientData<Book> ToBooksData(string apiProvider)
        => new(apiProvider, isSuccessful: true)
        {
            Data = Works?.Count > 0? Works.Select(x => new Book
            {
                Title = x.Title,
                Authors = x.Authors.Select(a => a.Name).ToList(),
                DatePublished = new DateTimeOffset(new DateTime((int)x.FirstPublishYear, 1, 1), TimeSpan.Zero)
            }) : []
        };
}

/// <summary>
/// Represents a work related to a subject from the Open Library API.
/// </summary>
public partial class Work
{
    /// <summary>
    /// The key of the work.
    /// </summary>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// The title of the work.
    /// </summary>
    [JsonPropertyName("title")]
    public string Title { get; set; }

    /// <summary>
    /// The number of editions of the work.
    /// </summary>
    [JsonPropertyName("edition_count")]
    public long EditionCount { get; set; }

    /// <summary>
    /// The cover ID of the work.
    /// </summary>
    [JsonPropertyName("cover_id")]
    public long CoverId { get; set; }

    /// <summary>
    /// The cover edition key of the work.
    /// </summary>
    [JsonPropertyName("cover_edition_key")]
    public string CoverEditionKey { get; set; }

    /// <summary>
    /// The list of subjects related to the work.
    /// </summary>
    [JsonPropertyName("subject")]
    public List<string> Subject { get; set; }

    /// <summary>
    /// The IA collection of the work.
    /// </summary>
    [JsonPropertyName("ia_collection")]
    public List<string> IaCollection { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the work is in the lending library.
    /// </summary>
    [JsonPropertyName("lendinglibrary")]
    public bool Lendinglibrary { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the work is print disabled.
    /// </summary>
    [JsonPropertyName("printdisabled")]
    public bool Printdisabled { get; set; }

    /// <summary>
    /// The lending edition of the work.
    /// </summary>
    [JsonPropertyName("lending_edition")]
    public string LendingEdition { get; set; }

    /// <summary>
    /// The lending identifier of the work.
    /// </summary>
    [JsonPropertyName("lending_identifier")]
    public string LendingIdentifier { get; set; }

    /// <summary>
    /// The list of authors of the work.
    /// </summary>
    [JsonPropertyName("authors")]
    public List<Author> Authors { get; set; }

    /// <summary>
    /// The year of the first publication of the work.
    /// </summary>
    [JsonPropertyName("first_publish_year")]
    public long FirstPublishYear { get; set; }

    /// <summary>
    /// The IA of the work.
    /// </summary>
    [JsonPropertyName("ia")]
    public string Ia { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the work is available for public scan.
    /// </summary>
    [JsonPropertyName("public_scan")]
    public bool PublicScan { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the work has full text available.
    /// </summary>
    [JsonPropertyName("has_fulltext")]
    public bool HasFulltext { get; set; }

    /// <summary>
    /// The availability information of the work.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("availability")]
    public Availability Availability { get; set; }
}

/// <summary>
/// Represents an author of a work from the Open Library API.
/// </summary>
public partial class Author
{
    /// <summary>
    /// The key of the author.
    /// </summary>
    [JsonPropertyName("key")]
    public string Key { get; set; }

    /// <summary>
    /// The name of the author.
    /// </summary>
    [JsonPropertyName("name")]
    public string Name { get; set; }
}

/// <summary>
/// Represents the availability information of a book from the Open Library API.
/// </summary>
public partial class Availability
{
    /// <summary>
    /// The status of the availability.
    /// </summary>
    [JsonPropertyName("status")]
    public string Status { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the book is available to browse.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("available_to_browse")]
    public bool? AvailableToBrowse { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the book is available to borrow.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("available_to_borrow")]
    public bool? AvailableToBorrow { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the book is available to be added to a waitlist.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("available_to_waitlist")]
    public bool? AvailableToWaitlist { get; set; }

    // Additional properties omitted for brevity. Please refer to the provided JSON properties for details.

    /// <summary>
    /// Gets or sets a value indicating whether the book is restricted.
    /// </summary>
    [JsonPropertyName("is_restricted")]
    public bool IsRestricted { get; set; }

    /// <summary>
    /// Gets or sets a value indicating whether the book is browseable.
    /// </summary>
    [JsonPropertyName("is_browseable")]
    public bool IsBrowseable { get; set; }

    /// <summary>
    /// The source of the availability information.
    /// </summary>
    [JsonPropertyName("__src__")]
    public string Src { get; set; }

    /// <summary>
    /// The error message associated with the availability.
    /// </summary>
    [JsonIgnore(Condition = JsonIgnoreCondition.WhenWritingNull)]
    [JsonPropertyName("error_message")]
    public string ErrorMessage { get; set; }
}